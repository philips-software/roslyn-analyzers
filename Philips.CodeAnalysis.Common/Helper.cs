// © 2019 Koninklijke Philips N.V. See License.md in the project root for license information.

using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Philips.CodeAnalysis.Common
{
	public static class Helper
	{
		public static string ToDiagnosticId(DiagnosticIds id)
		{
			return @"PH" + ((int)id).ToString();
		}

		public static bool IsInTestClass(SyntaxNodeAnalysisContext context)
		{
			return IsInTestClass(context, out _);
		}

		public static bool IsInTestClass(SyntaxNodeAnalysisContext context, out ClassDeclarationSyntax classDeclaration)
		{
			classDeclaration = context.Node.FirstAncestorOrSelf<ClassDeclarationSyntax>();
			if (classDeclaration == null)
			{
				return false;
			}
			SyntaxList<AttributeListSyntax> classAttributeList = classDeclaration.AttributeLists;
			return HasAttribute(classAttributeList, context, MsTestFrameworkDefinitions.TestClassAttribute, out _);
		}

		public static bool IsTestClass(ClassDeclarationSyntax classDeclaration, SyntaxNodeAnalysisContext context)
		{
			SyntaxList<AttributeListSyntax> classAttributeList = classDeclaration.AttributeLists;
			return HasAttribute(classAttributeList, context, MsTestFrameworkDefinitions.TestClassAttribute, out _);
		}

		/// <summary>
		/// Checks for the presence of an "autogenerated" comment in the starting trivia for a file
		/// The compiler generates a version of the AssemblyInfo.cs file for certain projects (not named AssemblyInfo.cs), and this is how to pick it up
		/// </summary>
		/// <param name="node"></param>
		/// <returns></returns>
		public static bool HasAutoGeneratedComment(CompilationUnitSyntax node)
		{
			if (node.FindToken(0).IsKind(SyntaxKind.EndOfFileToken))
			{
				return false;
			}

			var first = node.GetLeadingTrivia();

			if (first.Count == 0)
			{
				return false;
			}

			string possibleHeader = first.ToFullString();


			bool isAutogenerated = possibleHeader.Contains(@"<autogenerated />") || possibleHeader.Contains("<auto-generated");

			return isAutogenerated;
		}

		public static bool HasAnyAttribute(SyntaxList<AttributeListSyntax> attributeLists, SyntaxNodeAnalysisContext context, params AttributeDefinition[] attributes)
		{
			return attributes.Any(x => HasAttribute(attributeLists, context, x));
		}

		public static bool HasAttribute(SyntaxList<AttributeListSyntax> attributeLists, SyntaxNodeAnalysisContext context, AttributeDefinition attribute)
		{
			return HasAttribute(attributeLists, context, attribute.Name, attribute.FullName, out _);
		}

		public static bool HasAttribute(SyntaxList<AttributeListSyntax> attributeLists, SyntaxNodeAnalysisContext context, AttributeDefinition attribute, out Location location)
		{
			return HasAttribute(attributeLists, context, attribute.Name, attribute.FullName, out location);
		}

		public static bool HasAttribute(SyntaxList<AttributeListSyntax> attributeLists, SyntaxNodeAnalysisContext context, string name, string fullName, out Location location)
		{
			return HasAttribute(attributeLists, context, name, fullName, out location, out _);
		}

		public static bool HasAttribute(SyntaxList<AttributeListSyntax> attributeLists, SyntaxNodeAnalysisContext context, AttributeDefinition attributeDefinition, out Location location, out AttributeArgumentSyntax argument)
		{
			return HasAttribute(attributeLists, context, attributeDefinition.Name, attributeDefinition.FullName, out location, out argument);
		}

		public static bool HasAttribute(SyntaxList<AttributeListSyntax> attributeLists, SyntaxNodeAnalysisContext context, string name, string fullName, out Location location, out AttributeArgumentSyntax argumentValue)
		{
			return HasAttribute(attributeLists, () => { return context.SemanticModel; }, name, fullName, out location, out argumentValue);
		}
		public static bool HasAttribute(SyntaxList<AttributeListSyntax> attributeLists, Func<SemanticModel> getSemanticModel, string name, string fullName, out Location location, out AttributeArgumentSyntax argumentValue)
		{
			location = null;
			argumentValue = default;

			foreach (AttributeListSyntax attributes in attributeLists)
			{
				if (HasAttribute(attributes, getSemanticModel, name, fullName, out location, out argumentValue))
				{
					return true;
				}
			}
			return false;
		}

		public static bool HasAttribute(AttributeListSyntax attributes, SyntaxNodeAnalysisContext context, AttributeDefinition attributeDefinition, out Location location)
		{
			return HasAttribute(attributes, context, attributeDefinition.Name, attributeDefinition.FullName, out location);
		}

		public static bool HasAttribute(AttributeListSyntax attributes, SyntaxNodeAnalysisContext context, string name, string fullName, out Location location)
		{
			location = null;
			foreach (AttributeSyntax attribute in attributes.Attributes)
			{
				if (attribute.Name.ToString().Contains(name) && context.SemanticModel.GetSymbolInfo(attribute).Symbol is IMethodSymbol memberSymbol && memberSymbol.ToString().StartsWith(fullName))
				{
					location = attribute.GetLocation();
					return true;
				}
			}
			return false;
		}

		public static bool HasAttribute(AttributeListSyntax attributes, Func<SemanticModel> getSemanticModel, string name, string fullName, out Location location, out AttributeArgumentSyntax argument)
		{
			location = null;
			argument = default;
			foreach (AttributeSyntax attribute in attributes.Attributes)
			{
				if (IsAttribute(attribute, getSemanticModel, name, fullName, out location, out argument))
				{
					return true;
				}
			}

			return false;
		}

		public static bool IsAttribute(AttributeSyntax attribute, Func<SemanticModel> getSemanticModel, string name, string fullName, out Location location, out AttributeArgumentSyntax argument)
		{
			location = null;
			argument = default;

			if (attribute.Name.ToString().Contains(name))
			{
				SymbolInfo symbolInfo = getSemanticModel().GetSymbolInfo(attribute);
				if (symbolInfo.Symbol is IMethodSymbol memberSymbol && memberSymbol.ToString().StartsWith(fullName))
				{
					location = attribute.GetLocation();
					if (attribute.ArgumentList != null && attribute.ArgumentList.Arguments.Count > 0)
					{
						argument = attribute.ArgumentList.Arguments.First();
					}
					return true;
				}
			}

			return false;
		}
		public static bool IsAttribute(AttributeSyntax attribute, SyntaxNodeAnalysisContext context, AttributeDefinition attributeDefinition, out Location location, out AttributeArgumentSyntax argument)
		{
			return IsAttribute(attribute, () => { return context.SemanticModel; }, attributeDefinition.Name, attributeDefinition.FullName, out location, out argument);
		}

		public static bool IsDataRowAttribute(AttributeSyntax attribute, SyntaxNodeAnalysisContext context)
		{
			return IsAttribute(attribute, context, MsTestFrameworkDefinitions.DataRowAttribute, out _, out _);
		}

		public static bool IsTestMethod(MethodDeclarationSyntax method, SyntaxNodeAnalysisContext context)
		{
			return IsTestMethod(method.AttributeLists, context, out _);
		}

		public static bool IsTestMethod(SyntaxList<AttributeListSyntax> attributes, SyntaxNodeAnalysisContext context, out bool isDataTestMethod)
		{
			foreach (AttributeListSyntax syntax in attributes)
			{
				if (IsTestMethod(syntax, context, out _, out isDataTestMethod))
				{
					return true;
				}
			}

			isDataTestMethod = false;
			return false;
		}

		public static bool IsTestMethod(AttributeListSyntax attributes, SyntaxNodeAnalysisContext context, out Location location, out bool isDataTestMethod)
		{
			isDataTestMethod = false;
			bool returnValue = HasAttribute(attributes, context, MsTestFrameworkDefinitions.TestMethodAttribute, out location);
			if (!returnValue)
			{
				returnValue = HasAttribute(attributes, context, MsTestFrameworkDefinitions.DataTestMethodAttribute, out location);

				if (returnValue)
				{
					isDataTestMethod = true;
				}
			}
			return returnValue;
		}

		public static bool IsLiteral(ExpressionSyntax expression, SemanticModel semanticModel)
		{
			if (expression is LiteralExpressionSyntax literal)
			{
				Optional<object> literalValue = semanticModel.GetConstantValue(literal);

				return literalValue.HasValue;
			}

			var constant = semanticModel.GetConstantValue(expression);
			return constant.HasValue || IsConstantExpression(expression, semanticModel);
		}

		private static bool IsConstantExpression(ExpressionSyntax expression, SemanticModel semanticModel)
		{
			// this assumes you've already checked for literals
			if (expression is MemberAccessExpressionSyntax)
			{
				// return true for member accesses that resolve to a constant e.g. SurveillanceConstants.TrendWidth
				Optional<object> constValue = semanticModel.GetConstantValue(expression);
				return constValue.HasValue;
			}
			else
			{
				if (expression is TypeOfExpressionSyntax typeOfExpression && typeOfExpression.Type is PredefinedTypeSyntax)
				{
					// return true for typeof(<static type>)
					return true;
				}
			}

			return false;
		}

		public static bool IsExtensionClass(INamedTypeSymbol declaredSymbol)
		{
			return declaredSymbol is { MightContainExtensionMethods: true } && !declaredSymbol.GetMembers().Any(m =>
											m.Kind == SymbolKind.Method &&
											m.DeclaredAccessibility == Accessibility.Public &&
											!((IMethodSymbol)m).IsExtensionMethod);
		}


		public static string GetFileName(string filePath)
		{
			string[] nodes = filePath.Split('/', '\\');
			return nodes[nodes.Length - 1];
		}

		public static bool IsAssemblyInfo(SyntaxNodeAnalysisContext context)
		{
			string fileName = GetFileName(context.Node.SyntaxTree.FilePath);

			return fileName.EndsWith("AssemblyInfo.cs", StringComparison.OrdinalIgnoreCase);
		}

		public static bool IsInheritingFromClass(INamedTypeSymbol type, string classTypeName)
		{
			while (type != null)
			{
				if (type.Name == classTypeName)
				{
					return true;
				}
				type = type.BaseType;
			}

			return false;
		}

		public static bool IsUserControl(INamedTypeSymbol type)
		{
			return IsInheritingFromClass(type, @"ContainerControl");
		}

		public static bool IsLiteralTrueFalse(ExpressionSyntax expressionSyntax)
		{
			var kind = expressionSyntax.Kind();
			return kind switch
			{
				SyntaxKind.LogicalNotExpression => IsLiteralTrueFalse(((PrefixUnaryExpressionSyntax)expressionSyntax).Operand),//recurse.
				SyntaxKind.TrueLiteralExpression or SyntaxKind.FalseLiteralExpression => true,//literal true/false
				_ => false,
			};
		}

		public static bool IsDerivedFrom(this INamedTypeSymbol symbol, INamedTypeSymbol other)
		{
			while (symbol != null)
			{
				if (SymbolEqualityComparer.Default.Equals(symbol, other))
				{
					return true;
				}

				symbol = symbol.BaseType;
			}

			return false;
		}
	}
}
