// © 2019 Koninklijke Philips N.V. See License.md in the project root for license information.

using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Philips.CodeAnalysis.Common
{
	public class AssembliesHelper
	{
		private static readonly char[] TrimCharacters = { '/', '\\' };

		internal AssembliesHelper()
		{
			// Hide this constructor.
		}

		/// <summary>
		/// Checks for the presence of an "autogenerated" comment in the starting trivia for a file
		/// The compiler generates a version of the AssemblyInfo.cs file for certain projects (not named AssemblyInfo.cs), and this is how to pick it up
		/// </summary>
		public bool HasAutoGeneratedComment(CompilationUnitSyntax node)
		{
			if (node.FindToken(0).IsKind(SyntaxKind.EndOfFileToken))
			{
				return false;
			}

			SyntaxTriviaList first = node.GetLeadingTrivia();

			if (first.Count == 0)
			{
				return false;
			}

			var possibleHeader = first.ToFullString();


			var isAutogenerated = possibleHeader.Contains(@"<autogenerated />") || possibleHeader.Contains("<auto-generated");

			return isAutogenerated;
		}

		public string GetFileName(string filePath)
		{
			var nodes = filePath.Split(TrimCharacters);
			return nodes[nodes.Length - 1];
		}

		public bool IsAssemblyInfo(SyntaxNode node)
		{
			var fileName = GetFileName(node.SyntaxTree.FilePath);

			return fileName.EndsWith("AssemblyInfo.cs", StringComparison.OrdinalIgnoreCase);
		}
	}
}
