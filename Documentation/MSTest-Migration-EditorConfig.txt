# Example .editorconfig for migrating from Philips MSTest analyzers to Microsoft's official MSTest analyzers
# This configuration demonstrates the recommended migration settings

# ==================================================
# MICROSOFT MSTEST ANALYZERS (Recommended)
# ==================================================
# Install: <PackageReference Include="MSTest.Analyzers" Version="3.10.0" PrivateAssets="all" />

# Core validation rules (high priority)
dotnet_diagnostic.MSTEST0002.severity = warning  # TestClass should be valid
dotnet_diagnostic.MSTEST0003.severity = warning  # TestMethod should be valid  
dotnet_diagnostic.MSTEST0005.severity = warning  # TestContext should be valid
dotnet_diagnostic.MSTEST0006.severity = warning  # Avoid ExpectedException attribute
dotnet_diagnostic.MSTEST0014.severity = warning  # DataRow should be valid
dotnet_diagnostic.MSTEST0030.severity = warning  # TestMethod requires TestClass

# Test lifecycle rules (medium priority)
dotnet_diagnostic.MSTEST0008.severity = warning  # TestInitialize should be valid
dotnet_diagnostic.MSTEST0009.severity = warning  # TestCleanup should be valid
dotnet_diagnostic.MSTEST0010.severity = warning  # ClassInitialize should be valid
dotnet_diagnostic.MSTEST0011.severity = warning  # ClassCleanup should be valid
dotnet_diagnostic.MSTEST0012.severity = suggestion # AssemblyInitialize should be valid
dotnet_diagnostic.MSTEST0013.severity = suggestion # AssemblyCleanup should be valid

# Test quality rules (medium priority)
dotnet_diagnostic.MSTEST0015.severity = warning  # Test methods should not be ignored
dotnet_diagnostic.MSTEST0026.severity = warning  # Avoid conditional access in asserts
dotnet_diagnostic.MSTEST0037.severity = suggestion # Use proper assert methods
dotnet_diagnostic.MSTEST0038.severity = warning  # Avoid AreSame with value types
dotnet_diagnostic.MSTEST0040.severity = warning  # Avoid asserts in async void context

# Design rules (low priority, often disabled by default)
dotnet_diagnostic.MSTEST0029.severity = suggestion # Public methods should be test methods
dotnet_diagnostic.MSTEST0016.severity = suggestion # TestClass should have test methods
dotnet_diagnostic.MSTEST0036.severity = warning  # Do not use shadowing

# Performance and best practices (informational)
dotnet_diagnostic.MSTEST0001.severity = suggestion # Use Parallelize attribute
dotnet_diagnostic.MSTEST0017.severity = suggestion # Assertion args in correct order
dotnet_diagnostic.MSTEST0023.severity = suggestion # Don't negate boolean assertions
dotnet_diagnostic.MSTEST0024.severity = suggestion # Don't store static TestContext
dotnet_diagnostic.MSTEST0025.severity = suggestion # Prefer Assert.Fail over always-false conditions
dotnet_diagnostic.MSTEST0032.severity = suggestion # Review always-true assert conditions

# Advanced/newer rules (consider enabling)
dotnet_diagnostic.MSTEST0018.severity = suggestion # DynamicData should be valid
dotnet_diagnostic.MSTEST0031.severity = suggestion # Don't use System.Description attribute
dotnet_diagnostic.MSTEST0034.severity = suggestion # Use ClassCleanupBehavior.EndOfClass
dotnet_diagnostic.MSTEST0035.severity = suggestion # Use DeploymentItem with TestMethod/TestClass
dotnet_diagnostic.MSTEST0039.severity = warning  # Use newer Assert.Throws
dotnet_diagnostic.MSTEST0041.severity = suggestion # Use condition base with TestClass
dotnet_diagnostic.MSTEST0042.severity = warning  # Avoid duplicate DataRows
dotnet_diagnostic.MSTEST0043.severity = suggestion # Use Retry with TestMethod
dotnet_diagnostic.MSTEST0044.severity = suggestion # Prefer TestMethod over DataTestMethod
dotnet_diagnostic.MSTEST0045.severity = suggestion # Use cooperative cancellation for timeout
dotnet_diagnostic.MSTEST0046.severity = suggestion # Prefer Assert over StringAssert
dotnet_diagnostic.MSTEST0048.severity = warning  # TestContext property usage
dotnet_diagnostic.MSTEST0049.severity = suggestion # Flow TestContext cancellation token
dotnet_diagnostic.MSTEST0050.severity = error    # Global test fixture should be valid

# ==================================================
# PHILIPS MSTEST ANALYZERS (Migration Settings)
# ==================================================

# DISABLE - Rules with direct Microsoft equivalents
dotnet_diagnostic.PH2004.severity = none  # Use MSTEST0006 instead (ExpectedException)
dotnet_diagnostic.PH2005.severity = none  # Use MSTEST0005 instead (TestContext usage)
dotnet_diagnostic.PH2013.severity = none  # Use MSTEST0015 instead (Ignore attribute)
dotnet_diagnostic.PH2016.severity = none  # Use MSTEST0008 instead (TestInitialize)
dotnet_diagnostic.PH2017.severity = none  # Use MSTEST0010 instead (ClassInitialize)
dotnet_diagnostic.PH2018.severity = none  # Use MSTEST0011 instead (ClassCleanup)
dotnet_diagnostic.PH2019.severity = none  # Use MSTEST0009 instead (TestCleanup)
dotnet_diagnostic.PH2033.severity = none  # Use MSTEST0014 instead (DataTestMethod requires DataRows)
dotnet_diagnostic.PH2034.severity = none  # Use MSTEST0030 instead (TestMethod requires TestClass)
dotnet_diagnostic.PH2036.severity = none  # Use MSTEST0003 instead (TestMethod must be public)
dotnet_diagnostic.PH2038.severity = none  # Use MSTEST0002 instead (TestClass must be public)
dotnet_diagnostic.PH2058.severity = none  # Use MSTEST0026 instead (Avoid Assert conditional check)
dotnet_diagnostic.PH2059.severity = none  # Use MSTEST0029 instead (Public methods should be TestMethod)

# CONSIDER DISABLING - Rules with similar Microsoft functionality
dotnet_diagnostic.PH2003.severity = none  # Consider MSTEST0037 instead (Assert.AreEqual usage)
dotnet_diagnostic.PH2008.severity = none  # Consider MSTEST0037 instead (Assert parameter types)
dotnet_diagnostic.PH2009.severity = none  # Consider MSTEST0037 instead (IsTrue/IsFalse usage)
dotnet_diagnostic.PH2035.severity = none  # Consider MSTEST0014 instead (DataTestMethod parameter count)
dotnet_diagnostic.PH2037.severity = none  # Consider MSTEST0003 instead (Unique test names)
dotnet_diagnostic.PH2050.severity = none  # Consider MSTEST0003 instead (Empty TestMethod)
dotnet_diagnostic.PH2055.severity = none  # Consider MSTEST0037 instead (Assert.IsTrue(true))
dotnet_diagnostic.PH2056.severity = none  # Consider MSTEST0037 instead (Assert.AreEqual(true, true))
dotnet_diagnostic.PH2076.severity = none  # Consider MSTEST0025 instead (Assert.Fail alternatives)
dotnet_diagnostic.PH2095.severity = none  # Consider MSTEST0003 instead (TestMethod return types)

# KEEP - Philips-specific rules that provide unique value
dotnet_diagnostic.PH2000.severity = suggestion  # Test method naming convention (unique to Philips)
dotnet_diagnostic.PH2010.severity = none       # Parentheses style (optional style preference)
dotnet_diagnostic.PH2011.severity = suggestion  # Description attribute usage (unique guidance)
dotnet_diagnostic.PH2012.severity = warning     # TestTimeout required (unique enforcement)
dotnet_diagnostic.PH2014.severity = suggestion  # Avoid Owner attribute (unique guidance)
dotnet_diagnostic.PH2015.severity = warning     # Required Categories (unique configuration)
dotnet_diagnostic.PH2041.severity = suggestion  # Avoid MS Fakes (unique to Philips preference for Moq)

# ==================================================
# PHILIPS MSTEST SPECIFIC CONFIGURATION
# ==================================================

# Configure allowed test categories for PH2015 (if keeping this rule)
dotnet_code_quality.PH2015.allowed_test_categories = Unit,Integration,Smoke

# ==================================================
# MIGRATION NOTES
# ==================================================
# 
# 1. Install Microsoft's MSTest analyzers:
#    <PackageReference Include="MSTest.Analyzers" Version="3.10.0" PrivateAssets="all" />
#
# 2. Test with both sets of analyzers enabled initially to compare behavior
#
# 3. Gradually disable Philips rules as you verify Microsoft equivalents work
#
# 4. Eventually remove Philips.CodeAnalysis.MsTestAnalyzers package reference:
#    <!-- Remove when migration complete -->
#    <!-- <PackageReference Include="Philips.CodeAnalysis.MsTestAnalyzers" Version="1.0.0" PrivateAssets="all" /> -->
#
# 5. Keep only Philips-specific rules that add unique value to your projects
#
# 6. Refer to migration guide: https://github.com/philips-software/roslyn-analyzers/blob/main/Documentation/MSTest-Migration-Guide.md