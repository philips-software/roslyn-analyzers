// © 2023 Koninklijke Philips N.V. See License.md in the project root for license information.

using System.Collections.Immutable;
using System.IO;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Philips.CodeAnalysis.Common;
using Philips.CodeAnalysis.MaintainabilityAnalyzers.Documentation;
using Philips.CodeAnalysis.Test.Helpers;
using Philips.CodeAnalysis.Test.Verifiers;

namespace Philips.CodeAnalysis.Test.Maintainability.Documentation
{
	[TestClass]
	public class CopyrightPresentAnalyzerTest : DiagnosticVerifier
	{
		private const string configuredCompanyName = @"Koninklijke Philips N.V.";

		protected override DiagnosticAnalyzer GetDiagnosticAnalyzer()
		{
			return new CopyrightPresentAnalyzer();
		}

		protected override ImmutableDictionary<string, string> GetAdditionalAnalyzerConfigOptions()
		{
			return base.GetAdditionalAnalyzerConfigOptions().Add($@"dotnet_code_quality.{Helper.ToDiagnosticId(DiagnosticId.CopyrightPresent)}.company_name", configuredCompanyName);
		}

		[DataRow(@"#region H
			#endregion", false, 2)]
		[DataRow(@"#region Header
#endregion", false, 2)]
		[DataRow(@"#region Header
// ©
#endregion", false, 2)]
		[DataRow(@"#region Header
// © Koninklijke Philips N.V.
#endregion", false, 2)]
		[DataRow(@"#region Header
// © 2021
#endregion", false, 2)]
		[DataRow(@"#region Header
// © Koninklijke Philips N.V. 2021
#endregion", true, 2)]
		[DataRow(@"#region Header
//
// © Koninklijke Philips N.V. 2021
#endregion", false, 0)]
		[DataRow(@"#region Header

// © Koninklijke Philips N.V. 2021
#endregion", true, 0)]
		[DataRow(@"#region © Koninklijke Philips N.V. 2021
//
// All rights are reserved. Reproduction or transmission in whole or in part,
// in any form or by any means, electronic, mechanical or otherwise, is
// prohibited without the prior written consent of the copyright owner.
//
// Filename: Dummy.cs
//
#endregion", true, 1)]
		[DataRow(@"#region © Koninklijke Philips N.V. 2021
#endregion", true, 1)]
		[DataRow(@"#region Copyright Koninklijke Philips N.V. 2021
#endregion", true, 1)]
		[DataRow(@"#region Koninklijke Philips N.V. 2021
#endregion", false, 2)]
		[DataRow(@"#region Copyright 2021
#endregion", false, 2)]
		[DataRow(@"#region Copyright Koninklijke Philips N.V.
#endregion", false, 2)]
		[DataRow(@"// ©", false, -1)]
		[DataRow(@"// © Koninklijke Philips N.V.", false, -1)]
		[DataRow(@"// © 2021", false, -1)]
		[DataRow(@"// Copyright 2021", false, -1)]
		[DataRow(@"// Copyright Koninklijke Philips N.V. 2021", true, -1)]
		[DataRow(@"/* Copyright Koninklijke Philips N.V. 2021", true, -1)]
		[DataRow(@"// © Koninklijke Philips N.V. 2021", true, -1)]
		[DataRow(@"/* © Koninklijke Philips N.V. 2021", true, -1)]
		[DataRow(@"// © 2019 Koninklijke Philips N.V. See License.md in the project root for license information.

namespace Philips.CodeAnalysis.Common
{
}", true, -1)]
		[DataRow(@"", false, 2)]
		[DataTestMethod]
		[TestCategory(TestDefinitions.UnitTests)]
		public async Task HeaderIsDetectedAsync(string content, bool isGood, int errorStartLine)
		{
			string baseline = @"{0}
using Microsoft.VisualStudio.TestTools.UnitTesting;
class Foo 
{{
  public void Foo()
  {{
  }}
}}
";
			string givenText = string.Format(baseline, content);

			if (isGood)
			{
				await VerifySuccessfulCompilation(givenText).ConfigureAwait(false);
			}
			else
			{
				await VerifyDiagnostic(givenText, DiagnosticId.CopyrightPresent, line: errorStartLine).ConfigureAwait(false);
			}
		}

		[TestMethod]
		[TestCategory(TestDefinitions.UnitTests)]
		public async Task HeaderIsDetected2Async()
		{
			string baseline = @"using Microsoft.VisualStudio.TestTools.UnitTesting;
class Foo 
{{
  public void Foo()
  {{
  }}
}}
";
			await VerifyDiagnostic(baseline).ConfigureAwait(false);
		}

		[DataRow(@"")]
		[DataRow(@"
")]
		[DataTestMethod]
		[TestCategory(TestDefinitions.UnitTests)]
		public async Task EmptyUnitIsIgnoredAsync(string text)
		{
			await VerifySuccessfulCompilation(text).ConfigureAwait(false);
		}


		[DataRow(@"// ------
// <auto-generated>
// content
// </auto-generated>
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "blah")]
		[DataRow(@"// <auto-generated>
// content
// </auto-generated>
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "blah")]
		[DataRow(@"// <auto-generated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "blah")]
		[DataRow(@"// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "blah")]
		[DataRow(@"using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "AssemblyInfo")]
		[DataRow(@"using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "Foo.AssemblyInfo")]
		[DataRow(@"using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute()]
", "Blah.Designer")]
		[DataTestMethod]
		[TestCategory(TestDefinitions.UnitTests)]
		public async Task AutogeneratedIsIgnoredAsync(string text, string filenamePrefix)
		{
			await VerifySuccessfulCompilation(text, filenamePrefix).ConfigureAwait(false);
		}

		[DataTestMethod]
		[DataRow("RuntimeFailure", "DereferenceNullAnalyzer")]
		[TestCategory(TestDefinitions.UnitTests)]
		public async Task DogFoodMaintainability(string folder, string analyzerName)
		{
			var path = Path.Combine("..", "..", "..", "..", "Philips.CodeAnalysis.MaintainabilityAnalyzers", folder, $"{analyzerName}.cs");
			await VerifySuccessfulCompilationFromFile(path).ConfigureAwait(false);
		}

		[DataTestMethod]
		[DataRow("MsTestAttributeDefinitions")]
		[TestCategory(TestDefinitions.UnitTests)]
		public async Task DogFoodMsTest(string analyzerName)
		{
			var path = Path.Combine("..", "..", "..", "..", "Philips.CodeAnalysis.MsTestAnalyzers", $"{analyzerName}.cs");
			await VerifySuccessfulCompilationFromFile(path).ConfigureAwait(false);
		}
	}
}
